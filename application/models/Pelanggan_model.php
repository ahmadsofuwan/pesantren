<?php
defined('BASEPATH') or exit('No direct script access allowed');
/**
 * Auto Generated By TrigerIgniter v1
 * Codeigniter Version 4.1.x
 * Codeigniter Model
 **/
require_once(APPPATH . 'third_party' . DIRECTORY_SEPARATOR . 'phpspreadsheet' . DIRECTORY_SEPARATOR . 'vendor' . DIRECTORY_SEPARATOR . 'autoload.php');

use PhpOffice\PhpSpreadsheet\Helper\Sample;
use PhpOffice\PhpSpreadsheet\IOFactory;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use CodeIgniter\Model;

class Pelanggan_model extends CI_Model
{
    protected $table      = 'pelanggan';
    protected $primaryKey = 'id';

    //To help protect against Mass Assignment Attacks, the Model class requires 
    //that you list all of the field names that can be changed during inserts and updates
    // https://codeigniter4.github.io/userguide/models/model.html#protecting-fields
    protected $allowedFields = ['id', 'nama', 'email', 'intas', 'username', 'alamat', 'nomor_hp', 'tanggal'];

    protected $useAutoIncrement = false;

    // protected $returnType     = 'array';
    protected $returnType     = 'object';
    protected $useSoftDeletes = false;

    protected $useTimestamps = false;
    protected $createdField  = 'created_at';
    protected $updatedField  = 'updated_at';
    protected $deletedField  = 'deleted_at';

    protected $validationRules    = [];
    protected $validationMessages = [];
    protected $skipValidation     = false;

    public $order = "DESC";
    public $columnIndex = "id";


    // insert data
    function insert($data)
    {
        $this->db->insert($this->table, $data);
    }

    // update data
    function update($id, $data)
    {
        $this->db->where($this->primaryKey, $id);
        $this->db->update($this->table, $data);
    }

    //COLUMNHEADER_STYLE_PHPSPREADSHEET
    /**
     * Property for PHPSpreadsheet
     * 
     * @access	public
     */
    public $headerStyle = array(
        'font' => array('bold' => true), // Set font nya jadi bold
        'alignment' => array(
            'horizontal' => \PhpOffice\PhpSpreadsheet\Style\Alignment::HORIZONTAL_CENTER, // Set text jadi ditengah secara horizontal (center)
            'vertical' => \PhpOffice\PhpSpreadsheet\Style\Alignment::VERTICAL_CENTER // Set text jadi di tengah secara vertical (middle)
        ),
        'borders' => array(
            'top' => ['borderStyle' => \PhpOffice\PhpSpreadsheet\Style\Border::BORDER_THIN], // Set border top dengan garis tipis
            'right' => ['borderStyle' => \PhpOffice\PhpSpreadsheet\Style\Border::BORDER_THIN],  // Set border right dengan garis tipis
            'bottom' => ['borderStyle' => \PhpOffice\PhpSpreadsheet\Style\Border::BORDER_THIN], // Set border bottom dengan garis tipis
            'left' => ['borderStyle' => \PhpOffice\PhpSpreadsheet\Style\Border::BORDER_THIN] // Set border left dengan garis tipis
        )
    );

    //IMPORT_PHPSPREADSHEET_FUNCTION
    public function import($filepath, $ext = ".xls")
    {
        if (strtolower($ext) == ".xls") {
            $reader = new \PhpOffice\PhpSpreadsheet\Reader\Xls();
        } else {
            $reader = new \PhpOffice\PhpSpreadsheet\Reader\Xlsx();
        }
        $reader->setReadDataOnly(true);

        $spreadsheet = $reader->load($filepath);
        $sheet = $spreadsheet->getSheet(0);
        $highestRow = $sheet->getHighestRow();
        $highestColumn = $sheet->getHighestColumn();

        $startImport = FALSE;
        $doInsert = FALSE;
        $startColumnIndex = 0;
        $counter = 0;

        for ($row = 1; $row <= $highestRow; $row++) {                  //  Read a row of data into an array                 
            $cellData = $sheet->rangeToArray(
                'A' . $row . ':' . $highestColumn . $row,
                NULL,
                TRUE,
                FALSE
            );

            // Sesuaikan key array dengan nama kolom di database
            if ($cellData == NULL) continue;
            // Pastikan kolom pertama atau kedua tidak kosong
            if ((!isset($cellData[0][0])) && (!isset($cellData[0][1])) && ($cellData[0][0] == NULL) && ($cellData[0][1] == NULL)) continue;

            $doInsert = FALSE;
            if ($startImport == TRUE) {
                $insertData = [];
                if (isset($cellData[0][$startColumnIndex + 0])) {
                    $insertData["id"] = $cellData[0][$startColumnIndex + 0];
                    $doInsert = TRUE;
                } else {
                    $doInsert = FALSE;
                }
                if (isset($cellData[0][$startColumnIndex + 1])) {
                    $insertData["nama"] = $cellData[0][$startColumnIndex + 1];
                    $doInsert = TRUE;
                } else {
                    $doInsert = FALSE;
                }
                if (isset($cellData[0][$startColumnIndex + 2])) {
                    $insertData["email"] = $cellData[0][$startColumnIndex + 2];
                    $doInsert = TRUE;
                } else {
                    $doInsert = FALSE;
                }
                if (isset($cellData[0][$startColumnIndex + 4])) {
                    $insertData["username"] = $cellData[0][$startColumnIndex + 4];
                    $doInsert = TRUE;
                } else {
                    $doInsert = FALSE;
                }
                if (isset($cellData[0][$startColumnIndex + 5])) {
                    $insertData["alamat"] = $cellData[0][$startColumnIndex + 5];
                    $doInsert = TRUE;
                } else {
                    $doInsert = FALSE;
                }
                if (isset($cellData[0][$startColumnIndex + 6])) {
                    $insertData["nomor_hp"] = $cellData[0][$startColumnIndex + 6];
                    $doInsert = TRUE;
                } else {
                    $doInsert = FALSE;
                }
                if (isset($cellData[0][$startColumnIndex + 12])) {
                    $insertData["tanggal"] = $cellData[0][$startColumnIndex + 12];
                    $doInsert = TRUE;
                } else {
                    $doInsert = FALSE;
                }

                if ($doInsert) {
                    $check = $this->db->where("id", $insertData["id"])->from("pelanggan")->count_all_results();
                    if ($check >= 1) {
                        $this->update($insertData["id"], $insertData);
                    } else {
                        $this->insert($insertData);
                    }
                    $counter++;
                }
            } else {
                if (
                    // jika kolom pertama tanpa nomor
                    strtolower($cellData[0][0]) == "id pelanggan" &&
                    strtolower($cellData[0][1]) == "nama" &&
                    strtolower($cellData[0][2]) == "email" &&
                    strtolower($cellData[0][4]) == "username" &&
                    strtolower($cellData[0][5]) == "alamat" &&
                    strtolower($cellData[0][6]) == "nomor hp" &&
                    strtolower($cellData[0][12]) == "tanggal aktif"
                ) {
                    $startImport = TRUE;
                    $startColumnIndex = 0;
                } elseif (
                    // jika kolom pertama adalah nomor
                    (strtolower($cellData[0][0]) == "no" || strtolower($cellData[0][0]) == "#") &&
                    strtolower($cellData[0][1]) == "id pelanggan" &&
                    strtolower($cellData[0][2]) == "nama" &&
                    strtolower($cellData[0][3]) == "email" &&
                    strtolower($cellData[0][5]) == "username" &&
                    strtolower($cellData[0][6]) == "alamat" &&
                    strtolower($cellData[0][7]) == "nomor hp" &&
                    strtolower($cellData[0][13]) == "tanggal aktif"
                ) {
                    $startImport = TRUE;
                    $startColumnIndex = 1;
                }
            };
        };

        return $counter;
    }
    //END_PHPSPREADSHEET_FUNCTION
}
